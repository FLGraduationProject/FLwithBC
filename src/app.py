import json
from web3 import Web3
import torch 
import numpy as np

ganache_url = "http://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(ganache_url))

web3.eth.defaultAccount = web3.eth.accounts[0]

abi = json.loads('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greet","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"greeting","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}]')
#address = web3.toChecksumAddress("0x0eF669Bf4e009dA0237f58ba4a50a74CDeB719c6")
bytecode = "608060405234801561001057600080fd5b506040518060400160405280600581526020017f48656c6c6f0000000000000000000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b5061010d565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261009857600085556100df565b82601f106100b157805160ff19168380011785556100df565b828001600101855582156100df579182015b828111156100de5782518255916020019190600101906100c3565b5b5090506100ec91906100f0565b5090565b5b808211156101095760008160009055506001016100f1565b5090565b6104428061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610101578063ef690cc014610184575b600080fd5b6100ff6004803603602081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610207565b005b610109610221565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61018c6102c3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cc5780820151818401526020810190506101b1565b50505050905090810190601f1680156101f95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b806000908051906020019061021d929190610361565b5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102b95780601f1061028e576101008083540402835291602001916102b9565b820191906000526020600020905b81548152906001019060200180831161029c57829003601f168201915b5050505050905090565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103595780601f1061032e57610100808354040283529160200191610359565b820191906000526020600020905b81548152906001019060200180831161033c57829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261039757600085556103de565b82601f106103b057805160ff19168380011785556103de565b828001600101855582156103de579182015b828111156103dd5782518255916020019190600101906103c2565b5b5090506103eb91906103ef565b5090565b5b808211156104085760008160009055506001016103f0565b509056fea2646970667358221220079509f5b2007f7004f93e2b6d037beff25aaaa80a20fda83462a2acd06c231864736f6c63430007040033"

Storage = web3.eth.contract(bytecode=bytecode, abi=abi)

tx_hash = Storage.constructor().transact()

tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)

contract = web3.eth.contract(
  address=tx_receipt.contractAddress,
  abi=abi,
)

print(tx_receipt.contractAddress)

print('Default contract greeting: {}'.format(
  contract.functions.greet().call()
))

tx_hash = contract.functions.setGreeting('HiHi').transact()

web3.eth.waitForTransactionReceipt(tx_hash)

print('Updated contract geeting: {}'.format(
  contract.functions.greet().call()
))







class SmartContract:
  def __init__(self):
    self.numclient
    web3 = Web3(Web3.HTTPProvider(ganache_url))
    web3.eth.getAccounts().then(function(result){accounts = result})
    #web3.eth.defaultAccount = web3.eth.accounts[0]
    truffleFile = json.load(open('./build/contracts/Rank.json'))
    abi = truffleFile['abi']
    bytecode = truffleFile['bytecode']
    contract = web3.eth.contract(bytecode=bytecode, abi=abi)
    tx_hash = contract.constructor().transact()
    tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
    self.contract = web3.eth.contract(address=tx_receipt.contractAddress, abi=abi)
    print("contract made")

  def set_contract(self,clientID,numclient):
    print("number of client {}".format(self.numclient))
    self.contract.functions.setting(numclient, {from:accounts[clientID]}).transact()

  def upload_contract(self, clientID, avgdist): 
    print("upload_contract by client : {}".format(clientID))
    self.contract.functions.upload(avgdist, {from:accounts[clientID]}).transact()

  def rank_contract(self, clientID):
    print("rank_contract by client : {}".format(clientID))
    self.contract.functions.ranking({from:accounts[clientID]}).transact()

  def seerank_contract(self):
    self.contract.functions.see_rank().call()



